# -*- coding: utf-8 -*-
"""fresh.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16kcstwkr3kuM94YeWNS5wnttzlu6BFM3
"""

# ! pip install -q kaggle

# from google.colab import files
# files.upload()

# ! mkdir ~/.kaggle

# ! cp kaggle.json ~/.kaggle/

# ! chmod 600 ~/.kaggle/kaggle.json

# ! kaggle datasets download -d sriramr/fruits-fresh-and-rotten-for-classification

# ! unzip /content/fruits-fresh-and-rotten-for-classification.zip

import glob
import shutil
import cv2
import os
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import random
import PIL

base_dir = os.path.join('fresh_or_rotten')

train_dir = os.path.join(base_dir, 'train')
train_img_dir = os.path.join(train_dir, 'images')
train_label_dir = os.path.join(train_dir, 'labels')

test_dir = os.path.join(base_dir, 'test')
test_img_dir = os.path.join(test_dir, 'images')
test_label_dir = os.path.join(test_dir, 'labels')

def create_dir(path):
    if not os.path.exists(path):
        os.mkdir(path)

create_dir(base_dir)

create_dir(train_dir)
create_dir(train_img_dir)
create_dir(train_label_dir)

create_dir(test_dir)
create_dir(test_img_dir)
create_dir(test_label_dir)

dataset_path = '.\\content\\dataset\\dataset'

fruit_count=[]
fruit_name=[]
for i in os.listdir(dataset_path+'/train'):
    fruit_name.append(i)
    fruit_count.append(len(os.listdir(os.path.join(dataset_path+'/train', i))))

fruit_df = pd.DataFrame({'fruit_name':fruit_name, 'fruit_count':fruit_count})

fig,axes = plt.subplots(1,2,figsize=(25,6), gridspec_kw=dict(wspace=0.005))
sns.barplot(data=fruit_df, x='fruit_name', y='fruit_count',ax=axes[0], alpha=0.5)
for i in axes[0].get_xticklabels():
    i.set_font('monospace')
    i.set_weight('semibold')
    i.set_size(12)
for j in axes[0].containers:
    axes[0].bar_label(j)

axes[0].set_xlabel('')
axes[0].set_ylabel('count', font='monospace', weight='semibold', size=12)
axes[0].set_title('The image count distribution\n', font='monospace', weight='semibold', size=15)

patches, texts, pcts = axes[1].pie(fruit_df['fruit_count'], labels=fruit_df['fruit_name'], wedgeprops={'linewidth': 2, 'edgecolor': 'white'},
            textprops={'size': 'x-large'}, startangle=90, autopct='%1.2f%%');
for i, patch in enumerate(patches):
    texts[i].set_color(patch.get_facecolor())
    patch.set_alpha(0.5)
for j in pcts:
    j.set_size(10)
    j.set_color('white')
    j.set_weight('semibold')
plt.setp(texts, fontweight='semibold', font='monospace')
axes[1].legend(loc=[1,0.5])
axes[1].set_title('The image count distribution\n', font='monospace', weight='semibold', size=15);

def get_image_range(img_path):
    img = cv2.imread(img_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    lower = np.array([0, 0, 0], dtype = "uint8")
    upper = np.array([255, 50, 255], dtype = "uint8")
    img = cv2.inRange(img, lower, upper)
    img = cv2.blur(img, (2, 2))
    ret, thresh = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY)
    img = cv2.bitwise_not(thresh)
    contours, hierarchy = cv2.findContours(img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    contours = max(contours, key=lambda x: cv2.contourArea(x))

    #get bounding box posotion
    xmin, ymin, xmax, ymax = cv2.boundingRect(contours)

    #get the original width,height of the image
    dimensions = img.shape
    h = img.shape[0]
    w = img.shape[1]

    #to calculate the bndBox info of this image for yolo
    xp = (xmin + (xmax-xmin)/2) * 1.0 / w
    yp = (ymin + (ymax-ymin)/2) * 1.0 / h
    wp = (xmax-xmin) * 1.0 / w
    hp = (ymax-ymin) * 1.0 / h
    return xp, yp, wp, hp

for dirname, _, filenames in os.walk(dataset_path):
    if dirname[1:].split('\\')[-2]=='train':
        for img_path in glob.glob(dirname+'/*.png'):
            shutil.copy(img_path, os.path.join(train_img_dir, img_path.split('\\')[-1]))
            label=0
            if img_path.split('\\')[-2] == 'freshapples':
                label=0
            elif img_path.split('\\')[-2] == 'freshbanana':
                label=1
            elif img_path.split('\\')[-2] == 'freshoranges':
                label=2
            elif img_path.split('\\')[-2] == 'rottenapples':
                label=3
            elif img_path.split('\\')[-2] == 'rottenbanana':
                label=4
            elif img_path.split('\\')[-2] == 'rottenoranges':
                label=5
            x_center, y_center, box_width, box_height = get_image_range(img_path)
            text = str(label)+' '+str(x_center)+' '+str(y_center)+' '+str(box_width)+' '+str(box_height)
            with open (os.path.join(train_label_dir, img_path.split('\\')[-1][:-4]+'.txt'),'w') as file:
                file.write(text)

    if dirname[1:].split('\\')[-2]=='test':
        for img_path in glob.glob(dirname+'/*.png'):
            shutil.copy(img_path, os.path.join(test_img_dir, img_path.split('\\')[-1]))
            label=0
            if img_path.split('\\')[-2] == 'freshapples':
                label=0
            elif img_path.split('\\')[-2] == 'freshbanana':
                label=1
            elif img_path.split('\\')[-2] == 'freshoranges':
                label=2
            elif img_path.split('\\')[-2] == 'rottenapples':
                label=3
            elif img_path.split('\\')[-2] == 'rottenbanana':
                label=4
            elif img_path.split('\\')[-2] == 'rottenoranges':
                label=5
            x_center, y_center, box_width, box_height = get_image_range(img_path)
            text = str(label)+' '+str(x_center)+' '+str(y_center)+' '+str(box_width)+' '+str(box_height)
            with open (os.path.join(test_label_dir, img_path.split('\\')[-1][:-4]+'.txt'),'w') as file:
                file.write(text)

print(f'There are {len(os.listdir(train_img_dir))} train images')
print(f'There are {len(os.listdir(train_label_dir))} corresponding train labels\n')

print(f'There are {len(os.listdir(test_img_dir))} train images')
print(f'There are {len(os.listdir(test_label_dir))} corresponding test labels')

df = pd.DataFrame({'file':['train', 'test'], 'count':[len(os.listdir(train_img_dir)),len(os.listdir(test_img_dir))]})

fig,axes = plt.subplots(1,2,figsize=(16,5))
sns.barplot(data=df.reset_index(), x='file', y='count',ax=axes[0], alpha=0.5)
for i in axes[0].get_xticklabels():
    i.set_font('monospace')
    i.set_weight('semibold')
    i.set_size(12)
for j in axes[0].containers:
    axes[0].bar_label(j)

axes[0].set_xlabel('')
axes[0].set_ylabel('count', font='monospace', weight='semibold', size=12)
axes[0].set_title('The image count distribution\n', font='monospace', weight='semibold', size=15)

patches, texts, pcts = axes[1].pie(df['count'], labels=df['file'], wedgeprops={'linewidth': 2, 'edgecolor': 'white'},
            textprops={'size': 'x-large'}, startangle=90, autopct='%1.2f%%');
for i, patch in enumerate(patches):
    texts[i].set_color(patch.get_facecolor())
    patch.set_alpha(0.5)
for j in pcts:
    j.set_size(10)
    j.set_color('white')
    j.set_weight('semibold')
plt.setp(texts, fontweight='semibold', font='monospace')
axes[1].legend(loc=[1,0.5])
axes[1].set_title('The image count distribution\n', font='monospace', weight='semibold', size=15);

for path in os.listdir(train_img_dir):
    if 'translation' in path:
        os.remove(os.path.join(train_img_dir, path))
    elif 'rotated' in path:
        os.remove(os.path.join(train_img_dir, path))
    elif 'vertical_flip' in path:
        os.remove(os.path.join(train_img_dir, path))
    elif 'saltandpepper' in path:
        os.remove(os.path.join(train_img_dir, path))

for path in os.listdir(test_img_dir):
    if 'translation' in path:
        os.remove(os.path.join(test_img_dir, path))
    elif 'rotated' in path:
        os.remove(os.path.join(test_img_dir, path))
    elif 'vertical_flip' in path:
        os.remove(os.path.join(test_img_dir, path))
    elif 'saltandpepper' in path:
        os.remove(os.path.join(test_img_dir, path))

for path in os.listdir(train_label_dir):
    if 'translation' in path:
        os.remove(os.path.join(train_label_dir, path))
    elif 'rotated' in path:
        os.remove(os.path.join(train_label_dir, path))
    elif 'vertical_flip' in path:
        os.remove(os.path.join(train_label_dir, path))
    elif 'saltandpepper' in path:
        os.remove(os.path.join(train_label_dir, path))

for path in os.listdir(test_label_dir):
    if 'translation' in path:
        os.remove(os.path.join(test_label_dir, path))
    elif 'rotated' in path:
        os.remove(os.path.join(test_label_dir, path))
    elif 'vertical_flip' in path:
        os.remove(os.path.join(test_label_dir, path))
    elif 'saltandpepper' in path:
        os.remove(os.path.join(test_label_dir, path))

print(f'There are {len(os.listdir(train_img_dir))} train images')
print(f'There are {len(os.listdir(train_label_dir))} corresponding train labels\n')

print(f'There are {len(os.listdir(test_img_dir))} train images')
print(f'There are {len(os.listdir(test_label_dir))} corresponding test labels')

img_path=[]
selected_img = random.sample([i for i in os.listdir(train_img_dir)], 10)
for i in selected_img:
    img_path.append(os.path.join(train_img_dir, i))


fig, axes = plt.subplots(2,5, figsize=(20,6), subplot_kw=dict(xticks=[], yticks=[]))
for i, ax in enumerate(axes.flat):
    ax.imshow(np.array(PIL.Image.open(img_path[i])))

yaml_file = """names:
- fresh_apples
- fresh_banana
- fresh_oranges
- rotten_apples
- rotten_banana
- rotten_oranges
nc: 6
train: /content/dataset/dataset/train
val: /content/dataset/dataset/test
"""

with open('./kaggle_data.yaml', 'w') as f:
    f.write(yaml_file)

with open(os.path.join(train_label_dir, os.listdir(train_label_dir)[0]),'r') as f:
    c = f.read()
    print(c)










